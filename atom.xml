<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dark Angel</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.darkangel7.com/"/>
  <updated>2017-04-28T10:45:09.000Z</updated>
  <id>http://blog.darkangel7.com/</id>
  
  <author>
    <name>Dark Angel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blog.darkangel7.com/2017/04/28/Jenkins%E9%83%A8%E7%BD%B2MacOS%20Slave%E5%AE%9E%E7%8E%B0%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90(iOS)/"/>
    <id>http://blog.darkangel7.com/2017/04/28/Jenkins部署MacOS Slave实现持续集成(iOS)/</id>
    <published>2017-04-28T10:37:30.000Z</published>
    <updated>2017-04-28T10:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>title: Hexo+Github的Blog搭建<br>date: 2016-08-19 12:40:16<br>tags:</p>
<p>[TOC]</p>
<h1 id="Jenkins部署MacOS-Slave实现持续集成-iOS"><a href="#Jenkins部署MacOS-Slave实现持续集成-iOS" class="headerlink" title="Jenkins部署MacOS Slave实现持续集成(iOS)"></a>Jenkins部署MacOS Slave实现持续集成(iOS)</h1><p>解决Linux服务器上的Jenkins无法构建Xcode工程</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于Linux服务器无法安装Xcode，所以Jenkins无法通过shell来调用xcodebuild、xcrun等命令来构建Xcode工程，因此无法持续集成，敏捷开发。下面介绍一种配置Jenkins节点的方式，来实现Linux上的Jenkins构建Xcode工程，并上传ipa到蒲公英pgyer来进行测试。</p>
<h2 id="一、配置MacOS-Slave"><a href="#一、配置MacOS-Slave" class="headerlink" title="一、配置MacOS Slave"></a>一、配置MacOS Slave</h2><p>Jenkins有个强大的功能，配置Slave(奴隶)服务器，来实现分布式部署构建。具体步骤如下：</p>
<h3 id="1-配置Mac电脑。在系统偏好设置-gt-共享-中开启-远程登录，如下图："><a href="#1-配置Mac电脑。在系统偏好设置-gt-共享-中开启-远程登录，如下图：" class="headerlink" title="1. 配置Mac电脑。在系统偏好设置 &gt; 共享 中开启 远程登录，如下图："></a>1. 配置Mac电脑。在<strong>系统偏好设置</strong> &gt; <strong>共享</strong> 中开启 <strong>远程登录</strong>，如下图：<img src="https://ww3.sinaimg.cn/large/006tNc79ly1ff2hls2iauj31140tidjg.jpg" alt=""></h3><h3 id="2-创建节点。"><a href="#2-创建节点。" class="headerlink" title="2. 创建节点。"></a>2. 创建节点。</h3><p>Jenkins &gt; 系统管理 &gt;  管理节点 &gt; 新建节点，输入节点名称，记得勾选 <code>Permanent Agent</code>，点击OK。</p>
<h3 id="3-配置节点。"><a href="#3-配置节点。" class="headerlink" title="3. 配置节点。"></a>3. 配置节点。</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2hfwxx8ej31eg0ts0wt.jpg" alt="">其中要保证<code>/User/Shared/Jenkins/</code>目录的权限为ssh链接的用户可读写。</p>
<p>Host是Mac的ip地址，Credentials是ssh登录Mac时需要的账户和密码。可以添加一个</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ff2hhcg0f1j31gq0r842o.jpg" alt=""></p>
<p><strong>下面的部分很重要</strong>：<img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2hiwj7mpj31gs0p4dj8.jpg" alt=""></p>
<p>PATH环境变量，需要在Mac上通过</p>
<pre><code>echo $PATH
/opt/iOSOpenDev/bin:/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/local/bin:/opt/local/sbin/
</code></pre><p>获取，然后copy过去。</p>
<p>Keychains and Provisioning Profiles路径要填写正确。没有这个选项的安装<a href="http://wiki.jenkins-ci.org/display/JENKINS/Keychains+and+Provisioning+Profiles+Plugin" target="_blank" rel="external">Keychains and Provisioning Profiles Management</a>插件。</p>
<h3 id="4-最后保存。"><a href="#4-最后保存。" class="headerlink" title="4. 最后保存。"></a>4. 最后保存。</h3><p>如果看到</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2hwlrqw8j30e203uglm.jpg" alt=""></p>
<p>即添加Mac Slave成功，且Mac Slave在线。若连不上，请反复确认<strong>远程工作目录</strong>的权限。</p>
<h2 id="二、配置Jenkins系统设置。"><a href="#二、配置Jenkins系统设置。" class="headerlink" title="二、配置Jenkins系统设置。"></a>二、配置Jenkins系统设置。</h2><h3 id="1-上传证书和描述文件。"><a href="#1-上传证书和描述文件。" class="headerlink" title="1. 上传证书和描述文件。"></a>1. 上传证书和描述文件。</h3><p>在 <strong>Jenkins</strong> &gt; <strong>系统管理</strong> &gt; <strong>Keychains and Provisioning Profiles Management</strong>中上传打包用的证书和描述文件。如下图：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ff2jcabj18j31kw0tijyh.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2jclndwnj31jy0siwic.jpg" alt=""></p>
<p>保存。</p>
<h3 id="2-在-Jenkins-gt-系统管理-gt-系统设置（全局设置）中设置："><a href="#2-在-Jenkins-gt-系统管理-gt-系统设置（全局设置）中设置：" class="headerlink" title="2. 在 Jenkins &gt; 系统管理 &gt; 系统设置（全局设置）中设置："></a>2. 在 <strong>Jenkins</strong> &gt; <strong>系统管理</strong> &gt; <strong>系统设置</strong>（全局设置）中设置：</h3><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1ff2j6764qgj31ei0t6adx.jpg" alt=""></p>
<p>很关键。<strong>Keychain</strong>的路径和密码需要填写Mac中登录用户的密码。</p>
<h3 id="3-在-Jenkins-gt-系统管理-gt-Configure-Global-Security-中配置："><a href="#3-在-Jenkins-gt-系统管理-gt-Configure-Global-Security-中配置：" class="headerlink" title="3. 在 Jenkins &gt; 系统管理 &gt; Configure Global Security 中配置："></a>3. 在 <strong>Jenkins</strong> &gt; <strong>系统管理</strong> &gt; <strong>Configure Global Security</strong> 中配置：</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2j8ffcsrj31jw0ckjt4.jpg" alt=""></p>
<p>开启Safe HTML。</p>
<h2 id="三、配置iOS项目。"><a href="#三、配置iOS项目。" class="headerlink" title="三、配置iOS项目。"></a>三、配置iOS项目。</h2><h3 id="1-安装插件。"><a href="#1-安装插件。" class="headerlink" title="1. 安装插件。"></a>1. 安装插件。</h3><p>安装 <code>build-name-setter</code>、<code>description setter plugin</code>插件。</p>
<h3 id="2-Jenkins-gt-新建。"><a href="#2-Jenkins-gt-新建。" class="headerlink" title="2. Jenkins &gt; 新建。"></a>2. <strong>Jenkins</strong> &gt; <strong>新建</strong>。</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2iw797sjj318q0vidm6.jpg" alt=""></p>
<h3 id="3-General"><a href="#3-General" class="headerlink" title="3. General."></a>3. <strong>General</strong>.</h3><p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1ff2jedt21qj31kw0u2afo.jpg" alt=""></p>
<p>这里添加了参数化构建过程，为了在每次Build时，可以填写更新说明，所以这里天添加了名为<code>News</code>的参数，当用户构建时填写了内容，可以在之后的脚本中通过<code>${News}</code>来获取<code>News</code>的值。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1ff2jf005ogj31kw0o1q5k.jpg" alt=""></p>
<p>这里指定Mac Slave服务器作为构建Xcode工程的Slave服务器，Xcode打包构建全部交给这个节点（Slave服务器）来完成。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1ff2jfc0bfij31kw0d2jsv.jpg" alt=""></p>
<h3 id="4-源码管理。"><a href="#4-源码管理。" class="headerlink" title="4. 源码管理。"></a>4. 源码管理。</h3><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ff2jh0iaijj31jk0uk41x.jpg" alt=""></p>
<p>这里填写本地或者远程的代码仓库（如gitlab或者git）。下面的Branch填写指定分支。</p>
<h3 id="5-构建触发器。"><a href="#5-构建触发器。" class="headerlink" title="5. 构建触发器。"></a>5. 构建触发器。</h3><p>这里暂时不设置，设置了可以自动化测试，和其他脚本配合使用。</p>
<h3 id="6-构建环境。"><a href="#6-构建环境。" class="headerlink" title="6. 构建环境。"></a>6. 构建环境。</h3><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1ff2jqxdzccj31kw0txq9d.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1ff2jssknawj31kw0pnn2s.jpg" alt=""></p>
<p>把之前上传的证书和描述文件添加上。</p>
<p>设置Build名称，这里添加了自定义名称。注意，高级里面只勾选第一个，不要勾选 <code>Set build name after build ends</code>，否则会报错。</p>
<h3 id="7-构建"><a href="#7-构建" class="headerlink" title="7. 构建"></a>7. 构建</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2jwre537j31kw0pygr0.jpg" alt=""></p>
<p>这里使用的脚本。</p>
<pre><code>export LANG=&quot;en_US.UTF-8&quot;

security -v unlock-keychain -p &quot;qinqin&quot;

ipa_name=&quot;URWork_iOS_beta&quot;
build_path=&quot;${WORKSPACE}/build/&quot;
fastlane gym --workspace URWorkClient.xcworkspace --scheme URWorkClient --clean --configuration Beta --export_method ad-hoc --output_name ${ipa_name} --output_directory ${build_path}

curl -F &quot;file=@${build_path}${ipa_name}.ipa&quot; \
-F &quot;uKey=f3f26f387cb7bbda48b64f25db6eb50d&quot; \
-F &quot;_api_key=d469dfcad5080c9d881a891201556c2a&quot; \
-F &quot;updateDescription=${News}&quot; \
https://www.pgyer.com/apiv1/app/upload
</code></pre><h4 id="最重要、最重要、最重要："><a href="#最重要、最重要、最重要：" class="headerlink" title="最重要、最重要、最重要："></a><strong>最重要、最重要、最重要：</strong></h4><p>Linux服务器上的Jenkins调用Mac Slave时，是通过之前设置的<strong>SSH</strong>登录的方式，而Apple为了安全，在ssh登录时，是不允许读取<strong>Keychains</strong>（钥匙串）的，所以 <code>security -v unlock-keychain -p &quot;yourpassword&quot;</code>这行命令就很重要了。在构建打包前，先解锁Keychains。</p>
<p>当然这里 <strong>fastlane</strong> 已经提前通过<strong>Homebrew</strong>安装好了，这里不再赘述。</p>
<blockquote>
<p><em>整体脚本的流程是，先解锁Keychain，然后用fastlane快速打包，最后上传到蒲公英平台，等待测试。</em></p>
</blockquote>
<h3 id="8-构建后操作。"><a href="#8-构建后操作。" class="headerlink" title="8. 构建后操作。"></a>8. 构建后操作。</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2k7cb7ptj31kw0ktjue.jpg" alt=""></p>
<p>附代码：</p>
<pre><code>&lt;h3&gt;更新说明:&lt;/h3&gt;&lt;p&gt;${News}&lt;/p&gt;&lt;a href=&quot;http://www.pgyer.com/urwork_ios&quot; style=&quot;display:block;margin:10px 0px;&quot; target=&quot;_blank&quot;&gt;点击跳转到下载页&lt;/a&gt;&lt;/br&gt;&lt;img src=&quot;http://www.pgyer.com/app/qrcode/urwork_ios&quot;&gt;
</code></pre><p>构建完成后，把之前用户输入的<strong>更新说明</strong>以及<strong>蒲公英下载地址</strong>和<strong>二维码</strong>通通显示在Build Description中。</p>
<h2 id="四、整体测试"><a href="#四、整体测试" class="headerlink" title="四、整体测试"></a>四、整体测试</h2><h3 id="1-打开Jenkins。"><a href="#1-打开Jenkins。" class="headerlink" title="1. 打开Jenkins。"></a>1. 打开Jenkins。</h3><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1ff2kbajk7cj31kw0u6jxm.jpg" alt=""></p>
<h3 id="2-点击develop-iOS。"><a href="#2-点击develop-iOS。" class="headerlink" title="2. 点击develop_iOS。"></a>2. 点击develop_iOS。</h3><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1ff2kang8dkj31kw0tf7c5.jpg" alt=""></p>
<h3 id="3-点击Build-with-Parameters"><a href="#3-点击Build-with-Parameters" class="headerlink" title="3. 点击Build with Parameters."></a>3. 点击Build with Parameters.</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ff2kdk1zdfj31kw0tktds.jpg" alt=""></p>
<h3 id="4-开始构建。"><a href="#4-开始构建。" class="headerlink" title="4. 开始构建。"></a>4. 开始构建。</h3><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ff2keezip1j31kw0tf10n.jpg" alt=""></p>
<h3 id="5-等待构建完成即可。"><a href="#5-等待构建完成即可。" class="headerlink" title="5. 等待构建完成即可。"></a>5. 等待构建完成即可。</h3><p>这里也可以查看构建进度：点击最新的一次构建</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1ff2kg18untj31kw0s1tdq.jpg" alt=""></p>
<p>点击Console Output<br><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ff2kgpirr9j31kw0sj13w.jpg" alt=""></p>
<p>在这里可以查看一些日志，如果出错了，也可以在这里查询。</p>
<h2 id="五、总结。"><a href="#五、总结。" class="headerlink" title="五、总结。"></a>五、总结。</h2><p>使用Jenkins打包Xcode工程整体过程很曲折，坑很多，按照这些来，可能还会遇到一些问题，附上一些链接，以供参考。</p>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><ul>
<li><a href="http://www.jianshu.com/p/371595ef08fe" target="_blank" rel="external">Jenkins+ Xcode+ 蒲公英 实现IOS自动化打包和分发</a></li>
<li><a href="http://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="external">手把手教你利用Jenkins持续集成iOS项目</a></li>
<li><a href="http://www.jianshu.com/p/62fa8083b45c" target="_blank" rel="external">Jenkins签名问题</a></li>
<li><a href="https://www.pgyer.com/doc/view/jenkins_ios" target="_blank" rel="external">使用 Jenkins 实现持续集成 (iOS)</a></li>
<li><a href="https://www.pgyer.com/doc/view/jenkins" target="_blank" rel="external">使用 Jenkins 实现持续集成 (Android)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;title: Hexo+Github的Blog搭建&lt;br&gt;date: 2016-08-19 12:40:16&lt;br&gt;tags:&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Jenkins部署MacOS-Slave实现持续集成-iOS&quot;&gt;&lt;a href=&quot;#Jenkin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo+Github的Blog搭建</title>
    <link href="http://blog.darkangel7.com/2016/08/19/Hexo+Github%E7%9A%84Blog%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.darkangel7.com/2016/08/19/Hexo+Github的Blog搭建/</id>
    <published>2016-08-19T04:40:16.000Z</published>
    <updated>2016-08-26T03:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h1><h2 id="一、安装Homebrew"><a href="#一、安装Homebrew" class="headerlink" title="一、安装Homebrew"></a>一、安装Homebrew</h2><p>Mac上已经安装了ruby环境，只需要输入</p>
<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre><h2 id="二、安装node-js"><a href="#二、安装node-js" class="headerlink" title="二、安装node.js"></a>二、安装node.js</h2><pre><code>sudo brew install node
</code></pre><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>Hexo是基于node.js的博客系统，这里安装就可以了。</p>
<pre><code>sudo npm install -g hexo 
npm install hexo-renderer-ejs --save
npm install hexo-renderer-stylus --save
npm install hexo-renderer-marked --save
</code></pre><p>安装完成后，找一个放blog的目录</p>
<pre><code>cd ~/Blog
</code></pre><p>然后执行初始化</p>
<pre><code>hexo init
</code></pre><p>然后可以直接预览hello word.md</p>
<pre><code>hexo g
hexo s
=&gt; [info] Hexo is running at localhost:4000/. Press Ctrl+C to stop.
</code></pre><p>g是generate, s是server，还有d是deploy（部署）推荐用首字母，方便快捷。</p>
<h2 id="四、创建Blog-Repository"><a href="#四、创建Blog-Repository" class="headerlink" title="四、创建Blog Repository"></a>四、创建Blog Repository</h2><p>在自己的Github创建Blog的仓库，如Blog-Hexo，命名无所谓。记住勾选README。</p>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6jw1f72qarsjd9j20va0aydh0.jpg" alt="repository1"></p>
<p><img src="http://ww2.sinaimg.cn/large/65e4f1e6jw1f72qbhppqfj214a0sqq6q.jpg" alt="repository2"><br>创建完毕，直接进行到下一步。</p>
<h2 id="五、购买域名"><a href="#五、购买域名" class="headerlink" title="五、购买域名"></a>五、购买域名</h2><p>推荐在万网购买，国外的Godaddy也可以。以万网为例：<br>买好域名实名认证了之后，到<code>控制台</code> - <code>云解析DNS</code>中添加一个解析，如：</p>
<p><img src="http://ww4.sinaimg.cn/large/65e4f1e6jw1f72qblgcswj21kw01qglt.jpg" alt=""></p>
<p>CNAME映射到自己的xxx.github.io。这里的xxx是你的在github的名称，我的是<code>DarkAngel7</code>。<br>在终端中输入</p>
<pre><code>dig blog.darkangel7.com +nostats +nocomments +nocmd
</code></pre><p>如果出现下面的结果，证明解析成功。</p>
<pre><code>DarkAngel-MacBook-Pro-2:Blog DarkAngel$ dig blog.darkangel7.com +nostats +nocomments +nocmd

; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; blog.darkangel7.com +nostats +nocomments +nocmd
;; global options: +cmd
;blog.darkangel7.com.        IN    A
blog.darkangel7.com.    30    IN    CNAME    darkangel7.github.io.
darkangel7.github.io.    2516    IN    CNAME    github.map.fastly.net.
github.map.fastly.net.    30    IN    CNAME    prod.github.map.fastlylb.net.
prod.github.map.fastlylb.net. 30 IN    A    151.101.100.133
</code></pre><h2 id="六、Deploy"><a href="#六、Deploy" class="headerlink" title="六、Deploy"></a>六、Deploy</h2><p>上一步完成域名到github pages的单向映射。本步完成github到域名的映射，完成输入域名解析到对应的内容。</p>
<p>首先在Blog/source里创建CNAME</p>
<pre><code>cd source
touch CNAME
vi CNAME
</code></pre><p>输入你在上一步CNAME的域名，建立映射关系。</p>
<pre><code>blog.darkangel7.com
</code></pre><p>修改<code>_config.yml</code>文件，配置一些东西。</p>
<pre><code># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
      type: git
      repository: git@github.com:DarkAngel7/Blog-Hexo.git
</code></pre><p>安装git插件</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>这里repository的地址可以是https的，也可以是git的，只不过git需要SSH证书，一般用https就可以了，如果出现443错误，替换成git。</p>
<p>然后在Blog目录下</p>
<pre><code>hexo g -d
</code></pre><p>生成静态文件并且部署出去，不出意外，已经可以外网访问了。</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="一、访问速度"><a href="#一、访问速度" class="headerlink" title="一、访问速度"></a>一、访问速度</h2><p>由于Google被墙，大部分主题中引用的jquery都会因为超时（可以Blog目录下搜索google），而造成页面访问很慢，这里需要将jquery改为百度的</p>
<pre><code>&lt;script src=&quot;//apps.bdimg.com/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre><h2 id="二、RSS订阅"><a href="#二、RSS订阅" class="headerlink" title="二、RSS订阅"></a>二、RSS订阅</h2><p>输入命令</p>
<pre><code>$ npm install hexo-generator-feed --save
</code></pre><p>然后在_config.yml中，添加    </p>
<pre><code>rss: /atom.xml
feed:
     type: atom
    path: atom.xml
     limit: 20
</code></pre><h2 id="三、搜索支持"><a href="#三、搜索支持" class="headerlink" title="三、搜索支持"></a>三、搜索支持</h2><p>现在在百度和Google是搜不到你的网站的，为了让搜索引擎搜索到，需要添加sitemap.xml。首先输入：</p>
<pre><code>npm install hexo-generator-sitemap --save
npm install hexo-generator-baidu-sitemap --save
</code></pre><p>然后在<code>_config.yml</code>文件中添加</p>
<pre><code>sitemap:
         path: sitemap.xml
baidusitemap:
         path: baidusitemap.xml
</code></pre><p>当前最好还是自己到搜索引擎提交</p>
<ul>
<li><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google搜索引擎提交入口</a></li>
<li><a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="external">百度搜索引擎入口</a></li>
</ul>
<p>先验证网站所有权，下载html，mv到Blog/themes/yourtheme/source目录下，执行</p>
<pre><code>hexo g -d
</code></pre><p>验证成功后，添加百度自动推送脚本，最好在<code>head.ejs</code>中添加百度自动推送的代码，至于<code>head.ejs</code>文件位置，在你使用的theme文件夹下搜索吧。<br>谷歌的话，在<code>抓取</code>-<code>站点地图</code>里面添加就好。</p>
<h2 id="四、评论功能"><a href="#四、评论功能" class="headerlink" title="四、评论功能"></a>四、评论功能</h2><p>可以使用<a href="http://duoshuo.com" target="_blank" rel="external">多说</a>来提供评论功能。首先，在<code>_config.yml</code>文件中添加</p>
<pre><code># Duoshuo
duoshuo_shortname: yoursite.doushuo.com
</code></pre><p>  然后，搜索themes文件夹下，你使用的theme文件目录下的<code>commemt.ejs</code>（不同的theme可能位置不同，请自行寻找）。修改如下：</p>
<pre><code> &lt;div id=&quot;comment&quot; class=&quot;comments-area&quot;&gt;
     &lt;% if(config.duoshuo_shortname) { %&gt;
     &lt;! -- 多说的代码 --&gt; 
     &lt;% } %&gt; 
&lt;/div&gt;    

 如果报关于data-thread-key的错误，则改成下面这样：
 &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= page.path %&gt;&quot; data-title=&quot;&lt;%= page.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div    &gt;
</code></pre><h2 id="五、分享功能"><a href="#五、分享功能" class="headerlink" title="五、分享功能"></a>五、分享功能</h2><p>可以在Blog目录下搜索<code>post/share</code>，一般在<code>article.ejs</code>文件中，或者<code>post.ejs</code>文件中，然后替换</p>
<pre><code>&lt;%- partial(&#39;post/author&#39;) %&gt;
</code></pre><p>为<a href="http://share.baidu.com/code" target="_blank" rel="external">百度分享</a>提供的代码。</p>
<h2 id="六、个人信息完善"><a href="#六、个人信息完善" class="headerlink" title="六、个人信息完善"></a>六、个人信息完善</h2><p>网站的信息一般都在<code>Blog/_config.yml</code>中修改。</p>
<p>关于Theme，去官方提供的<a href="https://github.com/tommy351/hexo/wiki/Themes" target="_blank" rel="external">主题列表</a>中选个现成的，按照里面的方法pull下来，如light主题</p>
<pre><code>$ git clone git://github.com/tommy351/hexo-theme-light.git themes/light
</code></pre><p>然后在<code>_config.yml</code>配置文件中设置：</p>
<pre><code>theme: light
</code></pre><p>关于主题的优化，一般在<code>themes/yourtheme/_config.yml</code>中配置。</p>
<h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>在Blog目录下，创建</p>
<pre><code>hexo new 文章题目
</code></pre><p>然后用Markdown编写，写好后save。</p>
<pre><code>hexo g
hexo s
</code></pre><p>生成，然后在本地localhost:4000预览一下，如果没有问题，就可以发布了。</p>
<pre><code>hexo d
</code></pre><p>所有的文章都是放在<code>Blog/source/_posts/</code>目录下的，可以随时编辑修改。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>还有一些其他的修改，这里就不一一提了，等待你慢慢发现。现在快开始写作吧~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h1&gt;&lt;h2 id=&quot;一、安装Homebrew&quot;&gt;&lt;a href=&quot;#一、安装Homebrew&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
  </entry>
  
</feed>
